// Code generated by finalunit dev, visit us at https://github.com/wimspaargaren/final-unit
package complex

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/suite"
)

type ComplexSuite struct {
	suite.Suite
}

type TestClient struct{}

func (s *TestClient) Do() (*Response, error) {
	pointerWorker := Response{Message: "Herophantom"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc0() {
	pointerW := Worker{Client: &TestClient{}}
	w := &pointerW
	input := []int{67, 74, -50, -17, 24}

	pCaLn, ivoek := w.SomeFunc(input)

	s.EqualValues(string(``), pCaLn)
	s.Error(ivoek)

	_ = pCaLn
	_ = ivoek
}

type TestClient2 struct{}

func (s *TestClient2) Do() (*Response, error) {
	pointerWorker := Response{Message: "Huggerplume"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc1() {
	pointerW := Worker{Client: &TestClient2{}}
	w := &pointerW
	input := []int{-19, 38, -60, -20, 5}

	xDSuT, dSWbz := w.SomeFunc(input)

	s.EqualValues(string(``), xDSuT)
	s.Error(dSWbz)

	_ = xDSuT
	_ = dSWbz
}

type TestClient3 struct{}

func (s *TestClient3) Do() (*Response, error) {
	pointerWorker := Response{Message: "Ocelotslash"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc2() {
	pointerW := Worker{Client: &TestClient3{}}
	w := &pointerW
	input := []int{78, 66}

	bvgwI, xgsqV := w.SomeFunc(input)

	s.EqualValues(string(``), bvgwI)
	s.Error(xgsqV)

	_ = bvgwI
	_ = xgsqV
}

type TestClient4 struct{}

func (s *TestClient4) Do() (*Response, error) {
	pointerWorker := Response{Message: "Cloakpepper"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc3() {
	pointerW := Worker{Client: &TestClient4{}}
	w := &pointerW
	input := []int{}

	eRHHe, exDnm := w.SomeFunc(input)

	s.EqualValues(string(``), eRHHe)
	s.Error(exDnm)

	_ = eRHHe
	_ = exDnm
}

type TestClient5 struct{}

func (s *TestClient5) Do() (*Response, error) {
	pointerWorker := Response{Message: "Sighttide"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc4() {
	pointerW := Worker{Client: &TestClient5{}}
	w := &pointerW
	input := []int{-92, 14, 79, -66, -26, -28}

	cWXML, wsbev := w.SomeFunc(input)

	s.EqualValues(string(``), cWXML)
	s.Error(wsbev)

	_ = cWXML
	_ = wsbev
}

type TestClient6 struct{}

func (s *TestClient6) Do() (*Response, error) {
	pointerWorker := Response{Message: "Dancerfire"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc5() {
	pointerW := Worker{Client: &TestClient6{}}
	w := &pointerW
	input := []int{-97, 25}

	srTRT, umlHa := w.SomeFunc(input)

	s.EqualValues(string(``), srTRT)
	s.Error(umlHa)

	_ = srTRT
	_ = umlHa
}

type TestClient7 struct{}

func (s *TestClient7) Do() (*Response, error) {
	pointerWorker := Response{Message: "Knightmulberry"}
	o := &pointerWorker
	o2 := func() error {
		return nil
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc6() {
	pointerW := Worker{Client: &TestClient7{}}
	w := &pointerW
	input := []int{-20, 10, -52}

	fUhbr, xNswY := w.SomeFunc(input)

	s.EqualValues(string(`Knightmulberry, [-20 10 -52]`), fUhbr)
	s.NoError(xNswY)

	_ = fUhbr
	_ = xNswY
}

type TestClient8 struct{}

func (s *TestClient8) Do() (*Response, error) {
	pointerWorker := Response{Message: "Bunnygrove"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc7() {
	pointerW := Worker{Client: &TestClient8{}}
	w := &pointerW
	input := []int{-13, 93, -39, -76, -60}

	tRFjR, oEZMa := w.SomeFunc(input)

	s.EqualValues(string(``), tRFjR)
	s.Error(oEZMa)

	_ = tRFjR
	_ = oEZMa
}

type TestClient9 struct{}

func (s *TestClient9) Do() (*Response, error) {
	pointerWorker := Response{Message: "Donkeyshard"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc8() {
	pointerW := Worker{Client: &TestClient9{}}
	w := &pointerW
	input := []int{97, -9, 57, 88, 57, -26, -87}

	vrKpy, eLwbl := w.SomeFunc(input)

	s.EqualValues(string(``), vrKpy)
	s.Error(eLwbl)

	_ = vrKpy
	_ = eLwbl
}

type TestClient10 struct{}

func (s *TestClient10) Do() (*Response, error) {
	pointerWorker := Response{Message: "Flasherdiamond"}
	o := &pointerWorker
	o2 := func() error {
		return nil
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc9() {
	pointerW := Worker{Client: &TestClient10{}}
	w := &pointerW
	input := []int{2, 49, 90, -57}

	zPXae, qHpjg := w.SomeFunc(input)

	s.EqualValues(string(`Flasherdiamond, [2 49 90 -57]`), zPXae)
	s.NoError(qHpjg)

	_ = zPXae
	_ = qHpjg
}

func TestComplexSuite(t *testing.T) {
	suite.Run(t, new(ComplexSuite))
}
