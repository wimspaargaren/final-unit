// Code generated by finalunit dev, visit us at https://github.com/wimspaargaren/final-unit
package complex

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/suite"
)

type ComplexSuite struct {
	suite.Suite
}

type TestClient struct{}

func (s *TestClient) Do() (*Response, error) {
	pointerWorker := Response{Message: "Daggerberry"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc0() {
	pointerW := Worker{Client: &TestClient{}}
	w := &pointerW
	input := []int{74, -57, 57}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(``), out)
	s.Error(out2)

	_ = out
	_ = out2
}

type TestClient2 struct{}

func (s *TestClient2) Do() (*Response, error) {
	pointerWorker := Response{Message: "Traderlavender"}
	o := &pointerWorker
	o2 := func() error {
		return nil
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc1() {
	pointerW := Worker{Client: &TestClient2{}}
	w := &pointerW
	input := []int{-63, 23, -48, -8, 78, 56, 44, -40, 85}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(`Traderlavender, [-63 23 -48 -8 78 56 44 -40 85]`), out)
	s.NoError(out2)

	_ = out
	_ = out2
}

type TestClient3 struct{}

func (s *TestClient3) Do() (*Response, error) {
	pointerWorker := Response{Message: "Pythonmaple"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc2() {
	pointerW := Worker{Client: &TestClient3{}}
	w := &pointerW
	input := []int{-27, -86, -80, 6, -22, -78}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(``), out)
	s.Error(out2)

	_ = out
	_ = out2
}

type TestClient4 struct{}

func (s *TestClient4) Do() (*Response, error) {
	pointerWorker := Response{Message: "Ravenplum"}
	o := &pointerWorker
	o2 := func() error {
		return nil
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc3() {
	pointerW := Worker{Client: &TestClient4{}}
	w := &pointerW
	input := []int{}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(``), out)
	s.Error(out2)

	_ = out
	_ = out2
}

type TestClient5 struct{}

func (s *TestClient5) Do() (*Response, error) {
	pointerWorker := Response{Message: "Mothlavender"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc4() {
	pointerW := Worker{Client: &TestClient5{}}
	w := &pointerW
	input := []int{80, 76, 57, 64, 6}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(``), out)
	s.Error(out2)

	_ = out
	_ = out2
}

type TestClient6 struct{}

func (s *TestClient6) Do() (*Response, error) {
	pointerWorker := Response{Message: "Roverbranch"}
	o := &pointerWorker
	o2 := func() error {
		return nil
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc5() {
	pointerW := Worker{Client: &TestClient6{}}
	w := &pointerW
	input := []int{}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(``), out)
	s.Error(out2)

	_ = out
	_ = out2
}

type TestClient7 struct{}

func (s *TestClient7) Do() (*Response, error) {
	pointerWorker := Response{Message: "Painterlapis"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc6() {
	pointerW := Worker{Client: &TestClient7{}}
	w := &pointerW
	input := []int{-8, 20, -82, -23, 6, -97}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(``), out)
	s.Error(out2)

	_ = out
	_ = out2
}

type TestClient8 struct{}

func (s *TestClient8) Do() (*Response, error) {
	pointerWorker := Response{Message: "Shriekerbutter"}
	o := &pointerWorker
	o2 := func() error {
		return nil
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc7() {
	pointerW := Worker{Client: &TestClient8{}}
	w := &pointerW
	input := []int{-43, -43, 91, -94, 86, 27, 93, 65}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(`Shriekerbutter, [-43 -43 91 -94 86 27 93 65]`), out)
	s.NoError(out2)

	_ = out
	_ = out2
}

type TestClient9 struct{}

func (s *TestClient9) Do() (*Response, error) {
	pointerWorker := Response{Message: "Weedheavy"}
	o := &pointerWorker
	o2 := func() error {
		return fmt.Errorf("very error")
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc8() {
	pointerW := Worker{Client: &TestClient9{}}
	w := &pointerW
	input := []int{-43, 8, -30, 84, 59, -27}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(``), out)
	s.Error(out2)

	_ = out
	_ = out2
}

type TestClient10 struct{}

func (s *TestClient10) Do() (*Response, error) {
	pointerWorker := Response{Message: "Dukerazor"}
	o := &pointerWorker
	o2 := func() error {
		return nil
	}()
	return o, o2
}

func (s *ComplexSuite) TestWorkerSomeFunc9() {
	pointerW := Worker{Client: &TestClient10{}}
	w := &pointerW
	input := []int{-2, 38, 92, 89, -94, -56, -6, 49}

	out, out2 := w.SomeFunc(input)

	s.EqualValues(string(`Dukerazor, [-2 38 92 89 -94 -56 -6 49]`), out)
	s.NoError(out2)

	_ = out
	_ = out2
}

func TestComplexSuite(t *testing.T) {
	suite.Run(t, new(ComplexSuite))
}
