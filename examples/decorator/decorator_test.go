// Code generated by finalunit dev, visit us at https://github.com/wimspaargaren/final-unit
package decorator

import (
	"testing"

	"github.com/stretchr/testify/suite"
)

type DecoratorSuite struct {
	suite.Suite
}

func (s *DecoratorSuite) TestDefaultManager0() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager1() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager2() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager3() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager4() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager5() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager6() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager7() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager8() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestDefaultManager9() {
	out := DefaultManager()

	pointerOut := *out
	pointerOut2 := *pointerOut.Config
	s.EqualValues(uint32(0x1), pointerOut2.time)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x10000), pointerOut2.memory)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint8(0x4), pointerOut2.threads)
	pointerOut = *out
	pointerOut2 = *pointerOut.Config
	s.EqualValues(uint32(0x20), pointerOut2.keyLen)

	_ = out
}

func (s *DecoratorSuite) TestPWManagerComparePassword0() {
	pointerM2 := PasswordConfig{time: uint32(49), memory: uint32(14), threads: uint8(90), keyLen: uint32(30)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := wrongHash()

	out, out2 := m.ComparePassword(password, hash)

	s.False(out)
	s.Error(out2)

	_ = out
	_ = out2
}

func (s *DecoratorSuite) TestPWManagerComparePassword1() {
	pointerM2 := PasswordConfig{time: uint32(3), memory: uint32(55), threads: uint8(73), keyLen: uint32(9)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := wrongHash()

	out, out2 := m.ComparePassword(password, hash)

	s.False(out)
	s.Error(out2)

	_ = out
	_ = out2
}

func (s *DecoratorSuite) TestPWManagerComparePassword2() {
	pointerM2 := PasswordConfig{time: uint32(18), memory: uint32(40), threads: uint8(24), keyLen: uint32(35)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Keeperfancy"
	hash := wrongHash()

	out, out2 := m.ComparePassword(password, hash)

	s.False(out)
	s.Error(out2)

	_ = out
	_ = out2
}

func (s *DecoratorSuite) TestPWManagerComparePassword3() {
	pointerM2 := PasswordConfig{time: uint32(8), memory: uint32(94), threads: uint8(64), keyLen: uint32(15)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Cowlfair"
	hash := wrongHash()

	out, out2 := m.ComparePassword(password, hash)

	s.False(out)
	s.Error(out2)

	_ = out
	_ = out2
}

func (s *DecoratorSuite) TestPWManagerComparePassword4() {
	pointerM2 := PasswordConfig{time: uint32(79), memory: uint32(87), threads: uint8(42), keyLen: uint32(30)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := "Mistressdandelion"

	s.Panics(func() {
		m.ComparePassword(password, hash)
	})
}

func (s *DecoratorSuite) TestPWManagerComparePassword5() {
	pointerM2 := PasswordConfig{time: uint32(39), memory: uint32(71), threads: uint8(93), keyLen: uint32(15)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := defaultHash()

	out, out2 := m.ComparePassword(password, hash)

	s.False(out)
	s.NoError(out2)

	_ = out
	_ = out2
}

func (s *DecoratorSuite) TestPWManagerComparePassword6() {
	pointerM2 := PasswordConfig{time: uint32(90), memory: uint32(45), threads: uint8(58), keyLen: uint32(85)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := "Goosefir"

	s.Panics(func() {
		m.ComparePassword(password, hash)
	})
}

func (s *DecoratorSuite) TestPWManagerComparePassword7() {
	pointerM2 := PasswordConfig{time: uint32(39), memory: uint32(24), threads: uint8(62), keyLen: uint32(64)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := defaultHash()

	out, out2 := m.ComparePassword(password, hash)

	s.False(out)
	s.NoError(out2)

	_ = out
	_ = out2
}

func (s *DecoratorSuite) TestPWManagerComparePassword8() {
	pointerM2 := PasswordConfig{time: uint32(68), memory: uint32(58), threads: uint8(79), keyLen: uint32(85)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := wrongHash()

	out, out2 := m.ComparePassword(password, hash)

	s.False(out)
	s.Error(out2)

	_ = out
	_ = out2
}

func (s *DecoratorSuite) TestPWManagerComparePassword9() {
	pointerM2 := PasswordConfig{time: uint32(33), memory: uint32(43), threads: uint8(30), keyLen: uint32(88)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Hornethill"
	hash := defaultHash()

	out, out2 := m.ComparePassword(password, hash)

	s.False(out)
	s.NoError(out2)

	_ = out
	_ = out2
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword0() {
	pointerM2 := PasswordConfig{time: uint32(11), memory: uint32(31), threads: uint8(59), keyLen: uint32(36)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Maskgossamer"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword1() {
	pointerM2 := PasswordConfig{time: uint32(91), memory: uint32(22), threads: uint8(21), keyLen: uint32(8)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Ringerzenith"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword2() {
	pointerM2 := PasswordConfig{time: uint32(61), memory: uint32(31), threads: uint8(1), keyLen: uint32(63)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Riderstorm"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword3() {
	pointerM2 := PasswordConfig{time: uint32(43), memory: uint32(51), threads: uint8(26), keyLen: uint32(6)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Hoofmorning"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword4() {
	pointerM2 := PasswordConfig{time: uint32(47), memory: uint32(90), threads: uint8(14), keyLen: uint32(6)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Guardianneon"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword5() {
	pointerM2 := PasswordConfig{time: uint32(23), memory: uint32(44), threads: uint8(83), keyLen: uint32(39)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Butterflypetal"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword6() {
	pointerM2 := PasswordConfig{time: uint32(46), memory: uint32(56), threads: uint8(42), keyLen: uint32(17)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Crownrattle"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword7() {
	pointerM2 := PasswordConfig{time: uint32(85), memory: uint32(92), threads: uint8(13), keyLen: uint32(25)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Hornpollen"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword8() {
	pointerM2 := PasswordConfig{time: uint32(95), memory: uint32(18), threads: uint8(97), keyLen: uint32(93)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Faceshallow"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword9() {
	pointerM2 := PasswordConfig{time: uint32(8), memory: uint32(20), threads: uint8(4), keyLen: uint32(7)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Oxpitch"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func TestDecoratorSuite(t *testing.T) {
	suite.Run(t, new(DecoratorSuite))
}
