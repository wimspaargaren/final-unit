// Code generated by finalunit dev, visit us at https://github.com/wimspaargaren/final-unit
package decorator

import (
	"testing"

	"github.com/stretchr/testify/suite"
)

type DecoratorSuite struct {
	suite.Suite
}

func (s *DecoratorSuite) TestDefaultManager0() {
	ofcQL := DefaultManager()

	apbtP := *ofcQL
	ttDYo := *apbtP.Config
	s.EqualValues(uint32(0x1), ttDYo.time)
	apbtP = *ofcQL
	ttDYo = *apbtP.Config
	s.EqualValues(uint32(0x10000), ttDYo.memory)
	apbtP = *ofcQL
	ttDYo = *apbtP.Config
	s.EqualValues(uint8(0x4), ttDYo.threads)
	apbtP = *ofcQL
	ttDYo = *apbtP.Config
	s.EqualValues(uint32(0x20), ttDYo.keyLen)

	_ = ofcQL
}

func (s *DecoratorSuite) TestDefaultManager1() {
	wEHYj := DefaultManager()

	nlnAI := *wEHYj
	oKdBE := *nlnAI.Config
	s.EqualValues(uint32(0x1), oKdBE.time)
	nlnAI = *wEHYj
	oKdBE = *nlnAI.Config
	s.EqualValues(uint32(0x10000), oKdBE.memory)
	nlnAI = *wEHYj
	oKdBE = *nlnAI.Config
	s.EqualValues(uint8(0x4), oKdBE.threads)
	nlnAI = *wEHYj
	oKdBE = *nlnAI.Config
	s.EqualValues(uint32(0x20), oKdBE.keyLen)

	_ = wEHYj
}

func (s *DecoratorSuite) TestDefaultManager2() {
	biZna := DefaultManager()

	mZtwJ := *biZna
	jRLxy := *mZtwJ.Config
	s.EqualValues(uint32(0x1), jRLxy.time)
	mZtwJ = *biZna
	jRLxy = *mZtwJ.Config
	s.EqualValues(uint32(0x10000), jRLxy.memory)
	mZtwJ = *biZna
	jRLxy = *mZtwJ.Config
	s.EqualValues(uint8(0x4), jRLxy.threads)
	mZtwJ = *biZna
	jRLxy = *mZtwJ.Config
	s.EqualValues(uint32(0x20), jRLxy.keyLen)

	_ = biZna
}

func (s *DecoratorSuite) TestDefaultManager3() {
	qcMYQ := DefaultManager()

	uhgho := *qcMYQ
	lMFsQ := *uhgho.Config
	s.EqualValues(uint32(0x1), lMFsQ.time)
	uhgho = *qcMYQ
	lMFsQ = *uhgho.Config
	s.EqualValues(uint32(0x10000), lMFsQ.memory)
	uhgho = *qcMYQ
	lMFsQ = *uhgho.Config
	s.EqualValues(uint8(0x4), lMFsQ.threads)
	uhgho = *qcMYQ
	lMFsQ = *uhgho.Config
	s.EqualValues(uint32(0x20), lMFsQ.keyLen)

	_ = qcMYQ
}

func (s *DecoratorSuite) TestDefaultManager4() {
	iDngj := DefaultManager()

	hmibQ := *iDngj
	jCUaT := *hmibQ.Config
	s.EqualValues(uint32(0x1), jCUaT.time)
	hmibQ = *iDngj
	jCUaT = *hmibQ.Config
	s.EqualValues(uint32(0x10000), jCUaT.memory)
	hmibQ = *iDngj
	jCUaT = *hmibQ.Config
	s.EqualValues(uint8(0x4), jCUaT.threads)
	hmibQ = *iDngj
	jCUaT = *hmibQ.Config
	s.EqualValues(uint32(0x20), jCUaT.keyLen)

	_ = iDngj
}

func (s *DecoratorSuite) TestDefaultManager5() {
	vHVSF := DefaultManager()

	yWuNp := *vHVSF
	naqQY := *yWuNp.Config
	s.EqualValues(uint32(0x1), naqQY.time)
	yWuNp = *vHVSF
	naqQY = *yWuNp.Config
	s.EqualValues(uint32(0x10000), naqQY.memory)
	yWuNp = *vHVSF
	naqQY = *yWuNp.Config
	s.EqualValues(uint8(0x4), naqQY.threads)
	yWuNp = *vHVSF
	naqQY = *yWuNp.Config
	s.EqualValues(uint32(0x20), naqQY.keyLen)

	_ = vHVSF
}

func (s *DecoratorSuite) TestDefaultManager6() {
	vNibJ := DefaultManager()

	zEfeh := *vNibJ
	wOvID := *zEfeh.Config
	s.EqualValues(uint32(0x1), wOvID.time)
	zEfeh = *vNibJ
	wOvID = *zEfeh.Config
	s.EqualValues(uint32(0x10000), wOvID.memory)
	zEfeh = *vNibJ
	wOvID = *zEfeh.Config
	s.EqualValues(uint8(0x4), wOvID.threads)
	zEfeh = *vNibJ
	wOvID = *zEfeh.Config
	s.EqualValues(uint32(0x20), wOvID.keyLen)

	_ = vNibJ
}

func (s *DecoratorSuite) TestDefaultManager7() {
	uAwBm := DefaultManager()

	pXvBD := *uAwBm
	wNnqA := *pXvBD.Config
	s.EqualValues(uint32(0x1), wNnqA.time)
	pXvBD = *uAwBm
	wNnqA = *pXvBD.Config
	s.EqualValues(uint32(0x10000), wNnqA.memory)
	pXvBD = *uAwBm
	wNnqA = *pXvBD.Config
	s.EqualValues(uint8(0x4), wNnqA.threads)
	pXvBD = *uAwBm
	wNnqA = *pXvBD.Config
	s.EqualValues(uint32(0x20), wNnqA.keyLen)

	_ = uAwBm
}

func (s *DecoratorSuite) TestDefaultManager8() {
	mAYou := DefaultManager()

	anWvl := *mAYou
	qxtzr := *anWvl.Config
	s.EqualValues(uint32(0x1), qxtzr.time)
	anWvl = *mAYou
	qxtzr = *anWvl.Config
	s.EqualValues(uint32(0x10000), qxtzr.memory)
	anWvl = *mAYou
	qxtzr = *anWvl.Config
	s.EqualValues(uint8(0x4), qxtzr.threads)
	anWvl = *mAYou
	qxtzr = *anWvl.Config
	s.EqualValues(uint32(0x20), qxtzr.keyLen)

	_ = mAYou
}

func (s *DecoratorSuite) TestDefaultManager9() {
	ziyFY := DefaultManager()

	jkmSR := *ziyFY
	gldCC := *jkmSR.Config
	s.EqualValues(uint32(0x1), gldCC.time)
	jkmSR = *ziyFY
	gldCC = *jkmSR.Config
	s.EqualValues(uint32(0x10000), gldCC.memory)
	jkmSR = *ziyFY
	gldCC = *jkmSR.Config
	s.EqualValues(uint8(0x4), gldCC.threads)
	jkmSR = *ziyFY
	gldCC = *jkmSR.Config
	s.EqualValues(uint32(0x20), gldCC.keyLen)

	_ = ziyFY
}

func (s *DecoratorSuite) TestPWManagerComparePassword0() {
	pointerM2 := PasswordConfig{time: uint32(43), memory: uint32(25), threads: uint8(77), keyLen: uint32(68)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := defaultHash()

	aRzav, tCVxP := m.ComparePassword(password, hash)

	s.False(aRzav)
	s.NoError(tCVxP)

	_ = aRzav
	_ = tCVxP
}

func (s *DecoratorSuite) TestPWManagerComparePassword1() {
	pointerM2 := PasswordConfig{time: uint32(86), memory: uint32(57), threads: uint8(62), keyLen: uint32(78)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Ninjacord"
	hash := defaultHash()

	cKgkM, xptzs := m.ComparePassword(password, hash)

	s.False(cKgkM)
	s.NoError(xptzs)

	_ = cKgkM
	_ = xptzs
}

func (s *DecoratorSuite) TestPWManagerComparePassword2() {
	pointerM2 := PasswordConfig{time: uint32(99), memory: uint32(46), threads: uint8(93), keyLen: uint32(59)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := defaultHash()

	svxkw, fnVMh := m.ComparePassword(password, hash)

	s.False(svxkw)
	s.NoError(fnVMh)

	_ = svxkw
	_ = fnVMh
}

func (s *DecoratorSuite) TestPWManagerComparePassword3() {
	pointerM2 := PasswordConfig{time: uint32(62), memory: uint32(82), threads: uint8(89), keyLen: uint32(76)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := defaultHash()

	uLBPp, ylJhn := m.ComparePassword(password, hash)

	s.False(uLBPp)
	s.NoError(ylJhn)

	_ = uLBPp
	_ = ylJhn
}

func (s *DecoratorSuite) TestPWManagerComparePassword4() {
	pointerM2 := PasswordConfig{time: uint32(5), memory: uint32(84), threads: uint8(20), keyLen: uint32(56)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := wrongHash()

	wPviu, dGaMQ := m.ComparePassword(password, hash)

	s.False(wPviu)
	s.Error(dGaMQ)

	_ = wPviu
	_ = dGaMQ
}

func (s *DecoratorSuite) TestPWManagerComparePassword5() {
	pointerM2 := PasswordConfig{time: uint32(41), memory: uint32(1), threads: uint8(69), keyLen: uint32(59)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := wrongHash()

	jmcOx, bXtuK := m.ComparePassword(password, hash)

	s.False(jmcOx)
	s.Error(bXtuK)

	_ = jmcOx
	_ = bXtuK
}

func (s *DecoratorSuite) TestPWManagerComparePassword6() {
	pointerM2 := PasswordConfig{time: uint32(0), memory: uint32(60), threads: uint8(96), keyLen: uint32(84)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Slothquark"
	hash := defaultHash()

	s.Panics(func() {
		m.ComparePassword(password, hash)
	})
}

func (s *DecoratorSuite) TestPWManagerComparePassword7() {
	pointerM2 := PasswordConfig{time: uint32(56), memory: uint32(21), threads: uint8(87), keyLen: uint32(67)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := wrongHash()

	pbEuE, sstLZ := m.ComparePassword(password, hash)

	s.False(pbEuE)
	s.Error(sstLZ)

	_ = pbEuE
	_ = sstLZ
}

func (s *DecoratorSuite) TestPWManagerComparePassword8() {
	pointerM2 := PasswordConfig{time: uint32(14), memory: uint32(32), threads: uint8(95), keyLen: uint32(72)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := wrongHash()

	quaAN, kLuWQ := m.ComparePassword(password, hash)

	s.False(quaAN)
	s.Error(kLuWQ)

	_ = quaAN
	_ = kLuWQ
}

func (s *DecoratorSuite) TestPWManagerComparePassword9() {
	pointerM2 := PasswordConfig{time: uint32(98), memory: uint32(63), threads: uint8(78), keyLen: uint32(63)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := defaultPasswd()
	hash := wrongHash()

	wduMO, rtbSd := m.ComparePassword(password, hash)

	s.False(wduMO)
	s.Error(rtbSd)

	_ = wduMO
	_ = rtbSd
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword0() {
	pointerM2 := PasswordConfig{time: uint32(70), memory: uint32(94), threads: uint8(53), keyLen: uint32(35)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Griffinsky"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword1() {
	pointerM2 := PasswordConfig{time: uint32(72), memory: uint32(1), threads: uint8(64), keyLen: uint32(88)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Flybush"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword2() {
	pointerM2 := PasswordConfig{time: uint32(30), memory: uint32(79), threads: uint8(17), keyLen: uint32(4)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Servantspring"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword3() {
	pointerM2 := PasswordConfig{time: uint32(89), memory: uint32(67), threads: uint8(94), keyLen: uint32(81)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Moleblossom"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword4() {
	pointerM2 := PasswordConfig{time: uint32(20), memory: uint32(8), threads: uint8(42), keyLen: uint32(93)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Roarersprinkle"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword5() {
	pointerM2 := PasswordConfig{time: uint32(63), memory: uint32(95), threads: uint8(11), keyLen: uint32(42)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Jackalmad"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword6() {
	pointerM2 := PasswordConfig{time: uint32(72), memory: uint32(21), threads: uint8(23), keyLen: uint32(82)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Bellfast"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword7() {
	pointerM2 := PasswordConfig{time: uint32(0), memory: uint32(75), threads: uint8(2), keyLen: uint32(76)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Heronwell"

	s.Panics(func() {
		m.GeneratePassword(password)
	})
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword8() {
	pointerM2 := PasswordConfig{time: uint32(78), memory: uint32(29), threads: uint8(26), keyLen: uint32(39)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Pumablaze"

	// FIXME: non deterministic results detected, please add assert statements manually
	m.GeneratePassword(password)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword9() {
	pointerM2 := PasswordConfig{time: uint32(75), memory: uint32(71), threads: uint8(0), keyLen: uint32(36)}
	pointerM := PWManager{Config: &pointerM2}
	m := &pointerM
	password := "Voleclear"

	s.Panics(func() {
		m.GeneratePassword(password)
	})
}

func TestDecoratorSuite(t *testing.T) {
	suite.Run(t, new(DecoratorSuite))
}
