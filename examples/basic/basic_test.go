// Code generated by finalunit dev, visit us at https://github.com/wimspaargaren/final-unit
package basic

import (
	"testing"

	"github.com/stretchr/testify/suite"
)

type BasicSuite struct {
	suite.Suite
}

func (s *BasicSuite) TestFooBar0() {
	pointerF := Foo{}
	f := &pointerF
	x := 73

	out := f.Bar(x)

	s.EqualValues(string(`x not recognized: 73`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar1() {
	pointerF := Foo{}
	f := &pointerF
	x := 12

	out := f.Bar(x)

	s.EqualValues(string(`x between 10 and 20`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar2() {
	pointerF := Foo{}
	f := &pointerF
	x := -45

	out := f.Bar(x)

	s.EqualValues(string(`x is a negative integer`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar3() {
	pointerF := Foo{}
	f := &pointerF
	x := 32

	out := f.Bar(x)

	s.EqualValues(string(`x between 30 and 50`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar4() {
	pointerF := Foo{}
	f := &pointerF
	x := 2

	out := f.Bar(x)

	s.EqualValues(string(`x between zero and 10`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar5() {
	pointerF := Foo{}
	f := &pointerF
	x := -32

	out := f.Bar(x)

	s.EqualValues(string(`x is a negative integer`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar6() {
	pointerF := Foo{}
	f := &pointerF
	x := 50

	out := f.Bar(x)

	s.EqualValues(string(`x not recognized: 50`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar7() {
	pointerF := Foo{}
	f := &pointerF
	x := -49

	out := f.Bar(x)

	s.EqualValues(string(`x is a negative integer`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar8() {
	pointerF := Foo{}
	f := &pointerF
	x := -48

	out := f.Bar(x)

	s.EqualValues(string(`x is a negative integer`), out)

	_ = out
}

func (s *BasicSuite) TestFooBar9() {
	pointerF := Foo{}
	f := &pointerF
	x := 63

	out := f.Bar(x)

	s.EqualValues(string(`x not recognized: 63`), out)

	_ = out
}

func TestBasicSuite(t *testing.T) {
	suite.Run(t, new(BasicSuite))
}
